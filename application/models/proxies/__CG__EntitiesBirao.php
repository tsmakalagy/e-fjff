<?php

namespace Proxies\__CG__\Entities;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Birao extends \Entities\Birao implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setId($id)
    {
        $this->__load();
        return parent::setId($id);
    }

    public function getFokotany()
    {
        $this->__load();
        return parent::getFokotany();
    }

    public function setFokotany($fokotany)
    {
        $this->__load();
        return parent::setFokotany($fokotany);
    }

    public function getContacts()
    {
        $this->__load();
        return parent::getContacts();
    }

    public function addContact(\Entities\Contact $contact)
    {
        $this->__load();
        return parent::addContact($contact);
    }

    public function addContacts(\Doctrine\Common\Collections\ArrayCollection $contacts)
    {
        $this->__load();
        return parent::addContacts($contacts);
    }

    public function removeContacts(\Doctrine\Common\Collections\ArrayCollection $contacts)
    {
        $this->__load();
        return parent::removeContacts($contacts);
    }

    public function removeContact(\Entities\Contact $contact)
    {
        $this->__load();
        return parent::removeContact($contact);
    }

    public function getMembers()
    {
        $this->__load();
        return parent::getMembers();
    }

    public function addMember(\Entities\Olona $member)
    {
        $this->__load();
        return parent::addMember($member);
    }

    public function addMembers(\Doctrine\Common\Collections\ArrayCollection $members)
    {
        $this->__load();
        return parent::addMembers($members);
    }

    public function removeMembers(\Doctrine\Common\Collections\ArrayCollection $members)
    {
        $this->__load();
        return parent::removeMembers($members);
    }

    public function getKarapokotanies()
    {
        $this->__load();
        return parent::getKarapokotanies();
    }

    public function addKarapokotany(\Entities\Karapokotany $karapokotany)
    {
        $this->__load();
        return parent::addKarapokotany($karapokotany);
    }

    public function addKarapokotanies(\Doctrine\Common\Collections\ArrayCollection $karapokotanies)
    {
        $this->__load();
        return parent::addKarapokotanies($karapokotanies);
    }

    public function removeKarapokotanies(\Doctrine\Common\Collections\ArrayCollection $karapokotanies)
    {
        $this->__load();
        return parent::removeKarapokotanies($karapokotanies);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'fokotany', 'contacts', 'members', 'karapokotanies');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}